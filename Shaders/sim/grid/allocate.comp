/* Find the starting location for this bucket and allocate space for the next one. */

#version 460 core

#define LOCAL_SIZE 8

layout (local_size_x = LOCAL_SIZE) in;

struct BucketData {
    int startIndex;
    int particlesInBucket;
    int nextParticleSlot;
    int pd;
};

layout(std430, binding=0) buffer PredictedPositions {
    vec4 ps[];
};

layout(std430, binding=1) buffer GridStartIndices {
    BucketData startIndices[];
};

layout(std430, binding=2) buffer GridCellEntries {
    int cellEntries[];
};

layout(std430, binding=3) buffer TotalBucketParticleCount {
    int particleCountIndex[];
};

ivec3 posToCell(vec4 v);
uint flatten(ivec3 cell);

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= startIndices.length()) return;

    startIndices[gid].startIndex = atomicAdd(particleCountIndex[0], startIndices[gid].particlesInBucket);
}
