/* Functions for querying the grid. */

#version 460 core

struct BucketData {
    int startIndex;
    int particlesInBucket;
    int nextParticleSlot;
    int pd;
};

layout(std430, binding=1) buffer PredictedPositions {
    vec4 ps[];
};

layout(std430, binding=5) buffer GridStartIndices {
    BucketData startIndices[];
};

layout(std430, binding=6) buffer GridCellEntries {
    int cellEntries[];
};

layout(location = 15) uniform float gridCellSize;

ivec3 posToCell(vec4 v);
uint flatten(ivec3 cell);

// Get the grid cell containing point `p`. Will crash if `p` is outside the grid.
ivec3 posToCell(vec4 v) {
    return ivec3(floor(v.x / gridCellSize), floor(v.y / gridCellSize), floor(v.z / gridCellSize));
}

// Convert a grid cell `cell` to a flattened version that can be used to access `startIndices`.
uint flatten(ivec3 cell) {
    uint tmpx = (cell.x * 78455519);
    uint tmpy = (cell.y * 41397959);
    uint tmpz = (cell.z * 27614441);
    return uint(abs(tmpx ^ tmpy ^ tmpz)) % (startIndices.length());
}

// clamp a vector in a range
vec3 clampV(vec3 v, vec3 lo, vec3 hi) {
    vec3 vv = v;
    for (int i = 0; i < 3; ++i) {
        if (v[i] < lo[i]) vv[i] = lo[i];
        if (v[i] > hi[i]) vv[i] = hi[i];
    }
    return vv;
}

// Compute the squared length of `p`
float sqLen(vec3 p) {
    return dot(p, p);
}

// Quaternion multiplication
vec4 qmul(vec4 p, vec4 q) {
    vec4 qo;
    qo.w = p.w * q.w - p.x * q.x - p.y * q.y - p.z * q.z;
    qo.x = p.w * q.x + p.x * q.w + p.y * q.z - p.z * q.y;
    qo.y = p.w * q.y + p.y * q.w + p.z * q.x - p.x * q.z;
    qo.z = p.w * q.z + p.z * q.w + p.x * q.y - p.y * q.x;
    return qo;
}

// Normalize a quaternion
vec4 qnorm(vec4 q) {
    return normalize(q);
}

// Extract the imaginary (vector) component of a quaternion
vec3 Im(vec4 q) {
    return q.xyz;
}

// Compute the conjugate of a quaternion
vec4 conjugate(vec4 q) {
    vec4 qq = vec4(0);
    qq.w = q.w;
    qq.xyz = -q.xyz;
    return qq;
}

// Cast a quaternion `q` to a 3x3 matrix. Taken from GLM's implementation
mat3 toMat3(vec4 q) {
    mat3 m = mat3(1);
    float x = q.x;
    float y = q.y;
    float z = q.z;
    float w = q.w;

    m[0][0] = 1 - 2 * (y*y + z*z);
    m[0][1] = 2 * (x*y + z*w);
    m[0][2] = 2 * (x*z - w*y);
    m[1][0] = 2 * (x*y - z*w);
    m[1][1] = 1 - 2 * (x*x + z*z);
    m[1][2] = 2 * (y*z + x*w);
    m[2][0] = 2 * (x*z + y*w);
    m[2][1] = 2 * (y*z - x*w);
    m[2][2] = 1 - 2 * (x*x + y*y);
    
    return m;
}
