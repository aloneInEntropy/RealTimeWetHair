/* Contains implementations for the kernels used in the simulation. 
https://cs418.cs.illinois.edu/website/text/sph.html
todo: add `_KernelV` functions to avoid normalising vectors twice
*/

#version 460 core

#define PI 3.14159265358979323846264338327950288f  // Floating-point pi (from GLM)

float poly6Kernel(vec3 r, float h) {
    float sdst = dot(r, r);
    if (sdst >= h * h) return 0;

    sdst = max(sdst, 1e-9f);
    float dff = h * h - sdst;
    float poly6Const = 315.f / (64 * PI * pow(h, 9));
    return poly6Const * dff * dff * dff;
}

vec3 poly6KernelGrad(vec3 r, float h) {
    float sdst = dot(r, r);
    if (sdst >= h * h) return vec3(0);

    float dst = max(sqrt(sdst), 1e-9f);
    float dff = h * h - dst * dst;
    float poly6GradConst = 315.f / (64 * PI * pow(h, 9));
    return dff * dff * poly6GradConst * r;
}

float spikyKernel(vec3 r, float h) {
    float sdst = dot(r, r);
    if (sdst >= h * h) return 0;

    float dst = max(sqrt(sdst), 1e-9f);
    float dff = h - dst;
    float spikyConst = 15.f / (PI * pow(h, 6));
    return dff * dff * dff * spikyConst;
}

vec3 spikyKernelGrad(vec3 r, float h) {
    float sdst = dot(r, r);
    if (sdst >= h * h) return vec3(0);

    float dst = max(sqrt(sdst), 1e-9f);
    float dff = h - dst;
    float spikyGradConst = -45.f / (PI * pow(h, 6));
    return spikyGradConst * dff * dff * (r / dst);
}

float viscosityKernel(vec3 r_, float h) {
    float sdst = dot(r_, r_);
    if (sdst >= h * h) return 0;

    float r = max(sqrt(sdst), 1e-9f);
    float r2 = r * r;
    float r3 = r2 * r;
    float dff = (-r3 / (2 * pow(h, 3))) + (r2 / pow(h, 2)) + (h / (2 * r)) - 1;
    float viscConst = 15.f / (2 * PI * pow(h, 3));
    return dff * viscConst;
}

/* [AAI12, Eq. 2] */
vec3 AAI12TKernelNorm(vec3 r, float h) {
    float sdst = dot(r, r);
    float dst = max(sqrt(sdst), 1e-9f);
    float splineGradConst = 32 / (PI * pow(h, 9));
    float dff = h - dst;
    float prod = pow(dff, 3) * pow(dst, 3);
    if (2 * dst > h && dst <= h) {
        return splineGradConst * prod * (r/dst);
    } else if (dst > 0 && 2*dst <= h) {
        return splineGradConst * (2*prod - (pow(h, 6)/64)) * (r/dst);
    } else {
        return vec3(0);
    }
}

/* [AAI12, Eq. 6-7] */
vec3 AAI12AdhesionKernelNorm(vec3 r, float h) {
    float sdst = dot(r, r);
    float dst = max(sqrt(sdst), 1e-9f);
    if (!(2 * dst > h && dst <= h)) return vec3(0);

    float rootVal = (-(4 * sdst) / h) + 6*dst - 2*h;
    float root = pow(rootVal, 1.f/4.f); // quartic root
    float splineGradConst = 0.007 / pow(h, 3.25);
    return splineGradConst * root * (r/dst);
}

/* [Lin14, Eq. 12] */
vec3 ClumpingKernelNorm(vec3 r, float h, float rad) {
    float sdst = dot(r, r);
    float dst = max(sqrt(sdst), 1e-9f);
    float splineGradConst = 32 / (PI * pow(h, 9));
    float R = rad + rad;
    float q = (dst + h/2 - R) * R/h;
    float dff = h - q;
    float prod = pow(dff, 3) * pow(q, 3);
    if (dst > R && dst <= h) {
        return splineGradConst * prod * (r/dst);
    } else {
        return vec3(0);
    }
}